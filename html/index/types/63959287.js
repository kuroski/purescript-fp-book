// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["63959287"] = [{"values":[{"sourceSpan":{"start":[188,1],"name":".spago/aff/v6.0.0/src/Effect/Aff.purs","end":[188,25]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"joinFiber","moduleName":"Effect.Aff","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Fiber"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Blocks until the fiber completes, yielding the result. If the fiber\nthrows an exception, it is rethrown in the current fiber.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/aff/v6.0.0/src/Effect/Aff/Compat.purs","end":[48,37]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"fromEffectFnAff","moduleName":"Effect.Aff.Compat","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Effect","Aff","Compat"],"EffectFnAff"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Lift a FFI definition into an `Aff`. `EffectFnAff` makes use of `EffectFn` so\n`Effect` thunks are unnecessary. A definition might follow this example:\n\n```javascript\nexports._myAff = function (onError, onSuccess) {\n  var cancel = doSomethingAsync(function (err, res) {\n    if (err) {\n      onError(err);\n    } else {\n      onSuccess(res);\n    }\n  });\n  return function (cancelError, onCancelerError, onCancelerSuccess) {\n    cancel();\n    onCancelerSuccess();\n  };\n};\n```\n\n```purescript\nforeign import _myAff :: EffectFnAff String\n\nmyAff :: Aff String\nmyAff = fromEffectFnAff _myAff\n````\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/aff/v6.0.0/src/Effect/Aff/Compat.purs","end":[17,37]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"EffectFnCb","moduleName":"Effect.Aff.Compat","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[85,1],"name":".spago/tuples/v6.0.1/src/Data/Tuple/Nested.purs","end":[85,24]},"score":19,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T2","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[74,1],"name":".spago/tuples/v6.0.1/src/Data/Tuple/Nested.purs","end":[74,26]},"score":19,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"Tuple1","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T2"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[369,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[369,24]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"reverse","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reverse a list.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[241,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[241,22]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[234,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[234,22]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[194,1],"name":".spago/lists/v6.0.1/src/Data/List/Types.purs","end":[194,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Types","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[158,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[158,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"init","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[155,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[155,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"tail","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[130,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[130,33]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[394,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[394,24]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"reverse","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reverse a list.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[257,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[257,22]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[251,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[251,22]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[211,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/Types.purs","end":[211,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Lazy.Types","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[66,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"init","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[63,31]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"tail","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[45,33]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/functors/v4.1.1/src/Data/Functor/Product/Nested.purs","end":[31,26]},"score":4,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T2","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[32,1],"name":".spago/functors/v4.1.1/src/Data/Functor/Coproduct/Nested.purs","end":[32,28]},"score":4,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"C2","moduleName":"Data.Functor.Coproduct.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/either/v5.0.0/src/Data/Either/Nested.purs","end":[49,27]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"Either1","moduleName":"Data.Either.Nested","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","Either","Nested"],"\\/"]},{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Writer.purs","end":[24,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Writer","moduleName":"Control.Monad.Writer","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Writer","Trans"],"WriterT"]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["w",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Writer` monad is a synonym for the `WriterT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State.purs","end":[25,33]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"State","moduleName":"Control.Monad.State","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","State","Trans"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `State` monad is a synonym for the `StateT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Reader.purs","end":[22,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Reader","moduleName":"Control.Monad.Reader","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Trans"],"ReaderT"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["r",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Reader` monad is a synonym for the `ReaderT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Except.purs","end":[35,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Except","moduleName":"Control.Monad.Except","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Except","Trans"],"ExceptT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["e",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"A parametrizable exception monad; computations are either exceptions or\npure values. If an exception is thrown (see `throwError`), the computation\nterminates with that value. Exceptions may also be caught with `catchError`,\nallowing the computation to resume and exit successfully.\n\nThe type parameter `e` is the type of exceptions, and `a` is the type\nof successful results.\n\nA mechanism for trying many different computations until one succeeds is\nprovided via the `Alt` instance, specifically the `(<|>)` function.\nThe first computation to succeed is returned; if all fail, the exceptions\nare combined using their `Semigroup` instance. The `Plus` instance goes\nfurther and adds the possibility of a computation failing with an 'empty'\nexception; naturally, this requires the stronger constraint of a `Monoid`\ninstance for the exception type.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Cont.purs","end":[23,31]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Cont","moduleName":"Control.Monad.Cont","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Cont","Trans"],"ContT"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["r",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Cont` monad is a synonym for the `ContT` monad transformer applied to\nthe `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/transformers/v5.1.0/src/Control/Comonad/Traced.purs","end":[21,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Traced","moduleName":"Control.Comonad.Traced","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Traced","Trans"],"TracedT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["m",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Traced` comonad is a synonym for the `TracedT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/transformers/v5.1.0/src/Control/Comonad/Store.purs","end":[22,33]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Store","moduleName":"Control.Comonad.Store","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Store","Trans"],"StoreT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Store` comonad is a synonym for the `StoreT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/transformers/v5.1.0/src/Control/Comonad/Env.purs","end":[24,29]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Env","moduleName":"Control.Comonad.Env","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Env","Trans"],"EnvT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["e",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Env` comonad is a synonym for the `EnvT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[220,1],"name":"src/Ch5.purs","end":[220,24]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"reverse","moduleName":"Ch5","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reverse a list.\n\n```purescript\nreverse (1 : 2 : 3 : Nil) = (3 : 2 : 1 : Nil)\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[125,1],"name":"src/Ch5.purs","end":[125,22]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"last","moduleName":"Ch5","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or Nothing if the list is empty.\n\n```purescript\nlast (1 : 2 : 3 : Nil) = Just 3\nlast (Nil) = Nothing\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[104,1],"name":"src/Ch5.purs","end":[104,22]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"head","moduleName":"Ch5","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or Nothing if the list is empty.\n\n```purescript\nhead (1 : 2 : 3 : Nil) = 1\n```\n"}],"tag":"SearchResult"}]