// This file was generated by purescript-docs-search.
window.DocsSearchIndex["21"] = [["time",[{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/datetime/v5.0.2/src/Data/DateTime.purs","end":[46,25]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"time","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/datetime/v5.0.2/src/Data/Time.purs","end":[24,48]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Time","moduleName":"Data.Time","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Time","moduleName":"Data.Time","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Data","Time","Component"],"Hour"]},{"tag":"TypeConstructor","contents":[["Data","Time","Component"],"Minute"]},{"tag":"TypeConstructor","contents":[["Data","Time","Component"],"Second"]},{"tag":"TypeConstructor","contents":[["Data","Time","Component"],"Millisecond"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[33,1],"name":".spago/console/v5.0.0/src/Effect/Class/Console.purs","end":[33,52]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"time","moduleName":"Effect.Class.Console","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/console/v5.0.0/src/Effect/Console.purs","end":[49,45]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"time","moduleName":"Effect.Console","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Start a named timer.\n"}],"tag":"SearchResult"}]],["timeend",[{"values":[{"sourceSpan":{"start":[39,1],"name":".spago/console/v5.0.0/src/Effect/Class/Console.purs","end":[39,55]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"timeEnd","moduleName":"Effect.Class.Console","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[55,1],"name":".spago/console/v5.0.0/src/Effect/Console.purs","end":[55,48]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"timeEnd","moduleName":"Effect.Console","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Stop a named timer and print time since it started in milliseconds.\n"}],"tag":"SearchResult"}]],["timelog",[{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/console/v5.0.0/src/Effect/Class/Console.purs","end":[36,55]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"timeLog","moduleName":"Effect.Class.Console","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[52,1],"name":".spago/console/v5.0.0/src/Effect/Console.purs","end":[52,48]},"score":33,"packageInfo":{"values":["console"],"tag":"Package"},"name":"timeLog","moduleName":"Effect.Console","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Print the time since a named timer started in milliseconds.\n"}],"tag":"SearchResult"}]],["t7",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/functors/v4.1.1/src/Data/Functor/Product/Nested.purs","end":[41,51]},"score":4,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T7","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product","Nested"],"T6"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["f",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[90,1],"name":".spago/tuples/v6.0.1/src/Data/Tuple/Nested.purs","end":[90,49]},"score":19,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T7","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T6"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["f",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["pmode",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["ansi"],"tag":"Package"},"name":"PMode","moduleName":"Ansi.Codes","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Ansi","Codes"],"RenderingMode"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["on",[{"values":[{"sourceSpan":{"start":[112,1],"name":".spago/prelude/v5.0.1/src/Data/Function.purs","end":[112,61]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"on","moduleName":"Data.Function","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["c",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The `on` function is used to change the domain of a binary operator.\n\nFor example, we can create a function which compares two records based on the values of their `x` properties:\n\n```purescript\ncompareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering\ncompareX = compare `on` _.x\n```\n"}],"tag":"SearchResult"}]],["one",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"One","moduleName":"Ch9","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[38,3],"name":".spago/prelude/v5.0.1/src/Data/Semiring.purs","end":[38,12]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"one","moduleName":"Data.Semiring","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Semiring"],"Semiring"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["oneof",[{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/gen/v3.0.0/src/Control/Monad/Gen.purs","end":[34,67]},"score":4,"packageInfo":{"values":["gen"],"tag":"Package"},"name":"oneOf","moduleName":"Control.Monad.Gen","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup","Foldable"],"Foldable1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a generator that outputs a value chosen from a selection of\nexisting generators with uniform probability.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[286,1],"name":".spago/foldable-traversable/v5.0.1/src/Data/Foldable.purs","end":[286,62]},"score":15,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"oneOf","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combines a collection of elements using the `Alt` operation.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[104,1],"name":".spago/nonempty/v6.0.0/src/Data/NonEmpty.purs","end":[104,58]},"score":5,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"oneOf","moduleName":"Data.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the `alt` (`<|>`) result of:\n- The first element lifted to the container of the remaining elements.\n- The remaining elements.\n\n```purescript\nimport Data.Maybe(Maybe(..))\n\noneOf (1 :| Nothing) == Just 1\noneOf (1 :| Just 2) == Just 1\n\noneOf (1 :| [2, 3]) == [1,2,3]\n```\n"}],"tag":"SearchResult"}]],["oneofmap",[{"values":[{"sourceSpan":{"start":[290,1],"name":".spago/foldable-traversable/v5.0.1/src/Data/Foldable.purs","end":[290,77]},"score":15,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"oneOfMap","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Folds a structure into some `Plus`.\n"}],"tag":"SearchResult"}]],["onerecord",[{"values":[{"sourceSpan":{"start":[102,3],"name":".spago/prelude/v5.0.1/src/Data/Semiring.purs","end":[102,85]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"oneRecord","moduleName":"Data.Semiring","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","Semiring"],"SemiringRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ForAll","contents":["rproxy",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"SemiringRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rproxy"},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["noarguments",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/prelude/v5.0.1/src/Data/Generic/Rep.purs","end":[23,31]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoArguments","moduleName":"Data.Generic.Rep","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A representation for constructors with no arguments.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoArguments","moduleName":"Data.Generic.Rep","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["noconstructors",[{"values":[{"sourceSpan":{"start":[20,1],"name":".spago/prelude/v5.0.1/src/Data/Generic/Rep.purs","end":[20,20]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoConstructors","moduleName":"Data.Generic.Rep","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A representation for types with no constructors.\n"}],"tag":"SearchResult"}]],["node",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"Node","moduleName":"Test.Spec.Tree","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"c"}]}},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"Tree"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["noflags",[{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/strings/v5.0.0/src/Data/String/Regex/Flags.purs","end":[21,22]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"noFlags","moduleName":"Data.String.Regex.Flags","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"All flags set to false.\n"}],"tag":"SearchResult"}]],["noncanceler",[{"values":[{"sourceSpan":{"start":[207,1],"name":".spago/aff/v6.0.0/src/Effect/Aff.purs","end":[207,23]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"nonCanceler","moduleName":"Effect.Aff","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Canceler"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A canceler which does not cancel anything.\n"}],"tag":"SearchResult"}]],["none",[{"values":[{"sourceSpan":{"start":[93,1],"name":".spago/unfoldable/v5.0.0/src/Data/Unfoldable.purs","end":[93,40]},"score":9,"packageInfo":{"values":["unfoldable"],"tag":"Package"},"name":"none","moduleName":"Data.Unfoldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The container with no elements - unfolded with zero iterations.\nFor example:\n\n``` purescript\nnone == ([] :: Array Unit)\n```\n"}],"tag":"SearchResult"}]],["nonempty",[{"values":[{"sourceSpan":{"start":[47,1],"name":".spago/nonempty/v6.0.0/src/Data/NonEmpty.purs","end":[47,37]},"score":5,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"NonEmpty","moduleName":"Data.NonEmpty","info":{"values":[{"typeArguments":[["f",null],["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A non-empty container of elements of type a.\n\n```purescript\nimport Data.NonEmpty\n\nnonEmptyArray :: NonEmpty Array Int\nnonEmptyArray = NonEmpty 1 [2,3]\n\nimport Data.List(List(..), (:))\n\nnonEmptyList :: NonEmpty List Int\nnonEmptyList = NonEmpty 1 (2 : 3 : Nil)\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":5,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"NonEmpty","moduleName":"Data.NonEmpty","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nonemptyarray",[{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty/Internal.purs","end":[31,50]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"NonEmptyArray","moduleName":"Data.Array.NonEmpty.Internal","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"An array that is known not to be empty.\n\nYou can use the constructor to create a `NonEmptyArray` that isn't\nnon-empty, breaking the guarantee behind this newtype. It is\nprovided as an escape hatch mainly for the `Data.Array.NonEmpty`\nand `Data.Array` modules. Use this at your own risk when you know\nwhat you are doing.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"NonEmptyArray","moduleName":"Data.Array.NonEmpty.Internal","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nonemptylist",[{"values":[{"sourceSpan":{"start":[209,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/Types.purs","end":[209,63]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"NonEmptyList","moduleName":"Data.List.Lazy.Types","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"NonEmptyList","moduleName":"Data.List.Lazy.Types","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[192,1],"name":".spago/lists/v6.0.1/src/Data/List/Types.purs","end":[192,56]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"NonEmptyList","moduleName":"Data.List.Types","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"NonEmptyList","moduleName":"Data.List.Types","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nonemptyreplacement",[{"values":[{"sourceSpan":{"start":[53,1],"name":".spago/strings/v5.0.0/src/Data/String/NonEmpty/Internal.purs","end":[53,65]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"NonEmptyReplacement","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A newtype used in cases to specify a non-empty replacement for a pattern.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"NonEmptyReplacement","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nonemptyset",[{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set/NonEmpty.purs","end":[45,44]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"NonEmptySet","moduleName":"Data.Set.NonEmpty","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"`NonEmptySet a` represents a non-empty set of values of type `a`\n"}],"tag":"SearchResult"}]],["nonemptystring",[{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/strings/v5.0.0/src/Data/String/NonEmpty/Internal.purs","end":[28,47]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"NonEmptyString","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A string that is known not to be empty.\n\nYou can use this constructor to create a `NonEmptyString` that isn't\nnon-empty, breaking the guarantee behind this newtype. It is\nprovided as an escape hatch mainly for the `Data.NonEmpty.CodeUnits`\nand `Data.NonEmpty.CodePoints` modules. Use this at your own risk\nwhen you know what you are doing.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"NonEmptyString","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["not",[{"values":[{"sourceSpan":{"start":[44,3],"name":".spago/prelude/v5.0.1/src/Data/HeytingAlgebra.purs","end":[44,16]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"not","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["note",[{"values":[{"sourceSpan":{"start":[263,1],"name":".spago/either/v5.0.0/src/Data/Either.purs","end":[263,47]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"note","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Takes a default and a `Maybe` value, if the value is a `Just`, turn it into\na `Right`, if the value is a `Nothing` use the provided default as a `Left`\n\n```purescript\nnote \"default\" Nothing = Left \"default\"\nnote \"default\" (Just 1) = Right 1\n```\n"}],"tag":"SearchResult"}]],["note'",[{"values":[{"sourceSpan":{"start":[273,1],"name":".spago/either/v5.0.0/src/Data/Either.purs","end":[273,58]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"note'","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Similar to `note`, but for use in cases where the default value may be\nexpensive to compute.\n\n```purescript\nnote' (\\_ -> \"default\") Nothing = Left \"default\"\nnote' (\\_ -> \"default\") (Just 1) = Right 1\n```\n"}],"tag":"SearchResult"}]],["notelem",[{"values":[{"sourceSpan":{"start":[267,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty.purs","end":[267,61]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"notElem","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[421,1],"name":".spago/arrays/v6.0.1/src/Data/Array.purs","end":[421,53]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"notElem","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns true if the array does not have the given element.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[390,1],"name":".spago/foldable-traversable/v5.0.1/src/Data/Foldable.purs","end":[390,65]},"score":15,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"notElem","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether a value is not an element of a data structure.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[278,1],"name":".spago/pipes/v7.0.1/src/Pipes/Prelude.purs","end":[278,78]},"score":1,"packageInfo":{"values":["pipes"],"tag":"Package"},"name":"notElem","moduleName":"Pipes.Prelude","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pipes","Core"],"Producer"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"notElem returns `False` if p has an element equal to a, `True` otherwise\n"}],"tag":"SearchResult"}]],["noteq",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/prelude/v5.0.1/src/Data/Eq.purs","end":[35,45]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notEq","moduleName":"Data.Eq","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`notEq` tests whether one value is _not equal_ to another. Shorthand for\n`not (eq x y)`.\n"}],"tag":"SearchResult"}]],["noteq1",[{"values":[{"sourceSpan":{"start":[91,1],"name":".spago/prelude/v5.0.1/src/Data/Eq.purs","end":[91,61]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notEq1","moduleName":"Data.Eq","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nothing",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Nothing","moduleName":"Ch7a","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":21,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"Nothing","moduleName":"Data.Maybe","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["notrecord",[{"values":[{"sourceSpan":{"start":[118,3],"name":".spago/prelude/v5.0.1/src/Data/HeytingAlgebra.purs","end":[118,78]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notRecord","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["november",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"November","moduleName":"Data.Date.Component","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["now",[{"values":[{"sourceSpan":{"start":[18,1],"name":".spago/now/v5.0.0/src/Effect/Now.purs","end":[18,37]},"score":1,"packageInfo":{"values":["now"],"tag":"Package"},"name":"now","moduleName":"Effect.Now","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","DateTime","Instant"],"Instant"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Gets an `Instant` value for the date and time according to the current\nmachine’s clock.\n"}],"tag":"SearchResult"}]],["nowdate",[{"values":[{"sourceSpan":{"start":[26,1],"name":".spago/now/v5.0.0/src/Effect/Now.purs","end":[26,23]},"score":1,"packageInfo":{"values":["now"],"tag":"Package"},"name":"nowDate","moduleName":"Effect.Now","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Gets the date according to the current machine’s clock.\n"}],"tag":"SearchResult"}]],["nowdatetime",[{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/now/v5.0.0/src/Effect/Now.purs","end":[22,31]},"score":1,"packageInfo":{"values":["now"],"tag":"Package"},"name":"nowDateTime","moduleName":"Effect.Now","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Gets a `DateTime` value for the date and time according to the current\nmachine’s clock.\n"}],"tag":"SearchResult"}]],["nowtime",[{"values":[{"sourceSpan":{"start":[30,1],"name":".spago/now/v5.0.0/src/Effect/Now.purs","end":[30,23]},"score":1,"packageInfo":{"values":["now"],"tag":"Package"},"name":"nowTime","moduleName":"Effect.Now","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Gets the time according to the current machine’s clock.\n"}],"tag":"SearchResult"}]],["it",[{"values":[{"sourceSpan":{"start":[225,1],"name":".spago/spec/v5.0.1/src/Test/Spec.purs","end":[231,24]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"it","moduleName":"Test.Spec","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["arg",{"tag":"ForAll","contents":["g",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","Spec"],"Example"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"arg"},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec"],"SpecT"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"arg"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a spec with a description.\n"}],"tag":"SearchResult"}]],["italic",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["ansi"],"tag":"Package"},"name":"Italic","moduleName":"Ansi.Codes","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/ansi/v6.1.0/src/Ansi/Output.purs","end":[36,37]},"score":1,"packageInfo":{"values":["ansi"],"tag":"Package"},"name":"italic","moduleName":"Ansi.Output","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Ansi","Codes"],"GraphicsParam"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["item",[{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Tree.purs","end":[70,4]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"Item","moduleName":"Test.Spec.Tree","info":{"values":[{"typeArguments":[["m",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"Item","moduleName":"Test.Spec.Tree","info":{"values":[{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["isFocused",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["isParallelizable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"RCons","contents":["example",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"ActionWith"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"REmpty","contents":{}}]}]}]}]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["iterate",[{"values":[{"sourceSpan":{"start":[134,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/List/Trans.purs","end":[134,61]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"iterate","moduleName":"Control.Monad.List.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","List","Trans"],"ListT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Generate an infinite list by iterating a function.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[37,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST/Iterator.purs","end":[37,69]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"iterate","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Perform an action once for each item left in an iterator. If the action\nitself also advances the same iterator, `iterate` will miss those items\nout.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[54,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[54,53]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"iterate","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[192,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[192,45]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"iterate","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list by iterating a function\n"}],"tag":"SearchResult"}]],["iterator",[{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST/Iterator.purs","end":[25,60]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"Iterator","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"typeArguments":[["r",null],["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"This type provides a slightly easier way of iterating over an array's\nelements in an STArray computation, without having to keep track of\nindices.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[30,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST/Iterator.purs","end":[30,64]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"iterator","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Make an Iterator given an indexing function into an array (or anything\nelse). If `xs :: Array a`, the standard way to create an iterator over\n`xs` is to use `iterator (xs !! _)`, where `(!!)` comes from `Data.Array`.\n"}],"tag":"SearchResult"}]],["itonly",[{"values":[{"sourceSpan":{"start":[242,1],"name":".spago/spec/v5.0.1/src/Test/Spec.purs","end":[249,24]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"itOnly","moduleName":"Test.Spec","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["arg",{"tag":"ForAll","contents":["g",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","Spec"],"FocusWarning"],"constraintArgs":[]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","Spec"],"Example"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"arg"},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec"],"SpecT"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"arg"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a spec with a description and mark it as the only one to\nbe run. (useful for quickly narrowing down on a single test)\n"}],"tag":"SearchResult"}]],["hush",[{"values":[{"sourceSpan":{"start":[283,1],"name":".spago/either/v5.0.0/src/Data/Either.purs","end":[283,42]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"hush","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Turns an `Either` into a `Maybe`, by throwing eventual `Left` values away and converting\nthem into `Nothing`. `Right` values get turned into `Just`s.\n\n```purescript\nhush (Left \"ParseError\") = Nothing\nhush (Right 42) = Just 42\n```\n"}],"tag":"SearchResult"}]],["exactdate",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/datetime/v5.0.2/src/Data/Date.purs","end":[41,48]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"exactDate","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Year"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Month"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Day"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Constructs a date from year, month, and day components. The result will be\n`Nothing` if the provided values result in an invalid date.\n"}],"tag":"SearchResult"}]],["example",[{"values":[{"sourceSpan":{"start":[133,1],"name":".spago/spec/v5.0.1/src/Test/Spec.purs","end":[134,65]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"Example","moduleName":"Test.Spec","info":{"values":[{"superclasses":[],"fundeps":[[["t"],["arg"]],[["t"],["m"]]],"arguments":[["t",null],["arg",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["except",[{"values":[{"sourceSpan":{"start":[51,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Except/Trans.purs","end":[51,69]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"except","moduleName":"Control.Monad.Except.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Except","Trans"],"ExceptT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Construct a computation in the `ExceptT` transformer from an `Either` value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Except.purs","end":[35,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Except","moduleName":"Control.Monad.Except","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Except","Trans"],"ExceptT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["e",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"A parametrizable exception monad; computations are either exceptions or\npure values. If an exception is thrown (see `throwError`), the computation\nterminates with that value. Exceptions may also be caught with `catchError`,\nallowing the computation to resume and exit successfully.\n\nThe type parameter `e` is the type of exceptions, and `a` is the type\nof successful results.\n\nA mechanism for trying many different computations until one succeeds is\nprovided via the `Alt` instance, specifically the `(<|>)` function.\nThe first computation to succeed is returned; if all fail, the exceptions\nare combined using their `Semigroup` instance. The `Plus` instance goes\nfurther and adds the possibility of a computation failing with an 'empty'\nexception; naturally, this requires the stronger constraint of a `Monoid`\ninstance for the exception type.\n"}],"tag":"SearchResult"}]],["exceptt",[{"values":[{"sourceSpan":{"start":[33,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Except/Trans.purs","end":[33,49]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"ExceptT","moduleName":"Control.Monad.Except.Trans","info":{"values":[{"typeArguments":[["e",null],["m",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A monad transformer which adds exceptions to other monads, in the same way\nas `Except`. As before, `e` is the type of exceptions, and `a` is the type\nof successful results. The new type parameter `m` is the inner monad that\ncomputations run in.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"ExceptT","moduleName":"Control.Monad.Except.Trans","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["execrws",[{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/RWS.purs","end":[45,62]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execRWS","moduleName":"Control.Monad.RWS","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","RWS"],"RWS"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"w"}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `RWS` monad, discarding the result\n"}],"tag":"SearchResult"}]],["execrwst",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/RWS/Trans.purs","end":[41,83]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execRWST","moduleName":"Control.Monad.RWS.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","RWS","Trans"],"RWST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"w"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `RWST` monad, discarding the result.\n"}],"tag":"SearchResult"}]],["execstate",[{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State.purs","end":[36,45]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execState","moduleName":"Control.Monad.State","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","State"],"State"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `State` monad, discarding the result\n"}],"tag":"SearchResult"}]],["execstatet",[{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State/Trans.purs","end":[46,66]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execStateT","moduleName":"Control.Monad.State.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","State","Trans"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"s"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `StateT` monad discarding the result.\n"}],"tag":"SearchResult"}]],["execution",[{"values":[{"sourceSpan":{"start":[12,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Runner/Event.purs","end":[12,39]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"Execution","moduleName":"Test.Spec.Runner.Event","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["execwriter",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Writer.purs","end":[35,42]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execWriter","moduleName":"Control.Monad.Writer","info":{"values":[{"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Writer"],"Writer"]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"w"}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `Writer` monad, discarding the result\n"}],"tag":"SearchResult"}]],["execwritert",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Writer/Trans.purs","end":[41,63]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"execWriterT","moduleName":"Control.Monad.Writer.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Writer","Trans"],"WriterT"]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"w"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run a computation in the `WriterT` monad, discarding the result.\n"}],"tag":"SearchResult"}]],["exhausted",[{"values":[{"sourceSpan":{"start":[61,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST/Iterator.purs","end":[61,54]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"exhausted","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Check whether an iterator has been exhausted.\n"}],"tag":"SearchResult"}]],["exists",[{"values":[{"sourceSpan":{"start":[27,1],"name":".spago/exists/v5.0.0/src/Data/Exists.purs","end":[27,53]},"score":2,"packageInfo":{"values":["exists"],"tag":"Package"},"name":"Exists","moduleName":"Data.Exists","info":{"values":[{"kind":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}}]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"This type constructor can be used to existentially quantify over a type of kind `Type`.\n\nSpecifically, the type `Exists f` is isomorphic to the existential type `exists a. f a`.\n\nExistential types can be encoded using universal types (`forall`) for endofunctors in more general\ncategories. The benefit of this library is that, by using the FFI, we can create an efficient\nrepresentation of the existential by simply hiding type information.\n\nFor example, consider the type `exists s. Tuple s (s -> Tuple s a)` which represents infinite streams\nof elements of type `a`.\n\nThis type can be constructed by creating a type constructor `StreamF` as follows:\n\n```purescript\ndata StreamF a s = StreamF s (s -> Tuple s a)\n```\n\nWe can then define the type of streams using `Exists`:\n\n```purescript\ntype Stream a = Exists (StreamF a)\n```\n"}],"tag":"SearchResult"}]],["exp",[{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/math/v3.0.0/src/Math.purs","end":[34,39]},"score":6,"packageInfo":{"values":["math"],"tag":"Package"},"name":"exp","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `e` exponentiated to the power of the argument.\n"}],"tag":"SearchResult"}]],["expecterror",[{"values":[{"sourceSpan":{"start":[98,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Assertions.purs","end":[102,12]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"expectError","moduleName":"Test.Spec.Assertions","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Error","Class"],"MonadError"],"constraintArgs":[{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["experiment",[{"values":[{"sourceSpan":{"start":[39,1],"name":".spago/transformers/v5.1.0/src/Control/Comonad/Store/Class.purs","end":[39,88]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"experiment","moduleName":"Control.Comonad.Store.Class","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Comonad","Store","Class"],"ComonadStore"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"w"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"s"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Extract a collection of values from positions which depend on the current position.\n"}],"tag":"SearchResult"}]],["explore",[{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/free/v6.0.1/src/Control/Comonad/Cofree.purs","end":[96,7]},"score":2,"packageInfo":{"values":["free"],"tag":"Package"},"name":"explore","moduleName":"Control.Comonad.Cofree","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["x",{"tag":"ForAll","contents":["y",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"y"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"x"}]}]},{"tag":"TypeVar","contents":"y"}]}]},null]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Free"],"Free"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Cofree"],"Cofree"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Explore a value in the cofree comonad by using an expression in a\ncorresponding free monad.\n\nThe free monad should be built from a functor which pairs with the\nfunctor underlying the cofree comonad.\n"}],"tag":"SearchResult"}]],["explorem",[{"values":[{"sourceSpan":{"start":[104,1],"name":".spago/free/v6.0.1/src/Control/Comonad/Cofree.purs","end":[112,9]},"score":2,"packageInfo":{"values":["free"],"tag":"Package"},"name":"exploreM","moduleName":"Control.Comonad.Cofree","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["x",{"tag":"ForAll","contents":["y",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"y"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"x"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"y"}]}]}]},null]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Free"],"Free"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Cofree"],"Cofree"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["exponential",[{"values":[{"sourceSpan":{"start":[55,1],"name":".spago/numbers/v8.0.0/src/Data/Number/Format.purs","end":[55,29]},"score":1,"packageInfo":{"values":["numbers"],"tag":"Package"},"name":"exponential","moduleName":"Data.Number.Format","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a `toExponential`-based format from an integer. Values smaller than\n`0` and larger than `20` will be clamped.\n"}],"tag":"SearchResult"}]],["extend",[{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/control/v5.0.0/src/Control/Extend.purs","end":[25,49]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Extend","moduleName":"Control.Extend","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]}],"fundeps":[],"arguments":[["w",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Extend` class defines the extension operator `(<<=)`\nwhich extends a local context-dependent computation to\na global computation.\n\n`Extend` is the dual of `Bind`, and `(<<=)` is the dual of\n`(>>=)`.\n\nLaws:\n\n- Associativity: `extend f <<< extend g = extend (f <<< extend g)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,3],"name":".spago/control/v5.0.0/src/Control/Extend.purs","end":[25,49]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extend","moduleName":"Control.Extend","info":{"values":[{"typeClassArguments":[["w",null]],"typeClass":[["Control","Extend"],"Extend"],"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["extendflipped",[{"values":[{"sourceSpan":{"start":[38,1],"name":".spago/control/v5.0.0/src/Control/Extend.purs","end":[38,68]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extendFlipped","moduleName":"Control.Extend","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["w",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A version of `extend` with its arguments flipped.\n"}],"tag":"SearchResult"}]],["extract",[{"values":[{"sourceSpan":{"start":[21,3],"name":".spago/control/v5.0.0/src/Control/Comonad.purs","end":[21,32]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extract","moduleName":"Control.Comonad","info":{"values":[{"typeClassArguments":[["w",null]],"typeClass":[["Control","Comonad"],"Comonad"],"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["=<<",[{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/prelude/v5.0.1/src/Control/Bind.purs","end":[63,28]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(=<<)","moduleName":"Control.Bind","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["=<=",[{"values":[{"sourceSpan":{"start":[53,1],"name":".spago/control/v5.0.0/src/Control/Extend.purs","end":[53,40]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"(=<=)","moduleName":"Control.Extend","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["=<|",[{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/mmorph/v6.0.0/src/Control/Monad/Morph.purs","end":[89,22]},"score":1,"packageInfo":{"values":["mmorph"],"tag":"Package"},"name":"(=<|)","moduleName":"Control.Monad.Morph","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<=",[{"values":[{"sourceSpan":{"start":[155,1],"name":".spago/prelude/v5.0.1/src/Data/Ord.purs","end":[155,28]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<=)","moduleName":"Data.Ord","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<=<",[{"values":[{"sourceSpan":{"start":[138,1],"name":".spago/prelude/v5.0.1/src/Control/Bind.purs","end":[138,38]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<=<)","moduleName":"Control.Bind","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]]]