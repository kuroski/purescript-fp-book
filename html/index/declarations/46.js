// This file was generated by purescript-docs-search.
window.DocsSearchIndex["46"] = [["callcc",[{"values":[{"sourceSpan":{"start":[27,3],"name":".spago/transformers/v5.1.0/src/Control/Monad/Cont/Class.purs","end":[27,59]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"callCC","moduleName":"Control.Monad.Cont.Class","info":{"values":[{"typeClassArguments":[["m",null]],"typeClass":[["Control","Monad","Cont","Class"],"MonadCont"],"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Cont","Class"],"MonadCont"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["canceler",[{"values":[{"sourceSpan":{"start":[194,1],"name":".spago/aff/v6.0.0/src/Effect/Aff.purs","end":[194,47]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"Canceler","moduleName":"Effect.Aff","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A cancellation effect for actions run via `makeAff`. If a `Fiber` is\nkilled, and an async action is pending, the canceler will be called to\nclean it up.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"Canceler","moduleName":"Effect.Aff","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["cancelwith",[{"values":[{"sourceSpan":{"start":[286,1],"name":".spago/aff/v6.0.0/src/Effect/Aff.purs","end":[286,43]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"cancelWith","moduleName":"Effect.Aff","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Canceler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Attaches a custom `Canceler` to an action. If the computation is canceled,\nthen the custom `Canceler` will be run afterwards.\n"}],"tag":"SearchResult"}]],["canonicaldate",[{"values":[{"sourceSpan":{"start":[33,1],"name":".spago/datetime/v5.0.2/src/Data/Date.purs","end":[33,46]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"canonicalDate","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Year"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Month"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Day"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Constructs a date from year, month, and day components. The resulting date\ncomponents may not be identical to the input values, as the date will be\ncanonicalised according to the Gregorian calendar. For example, date\nvalues for the invalid date 2016-02-31 will be corrected to 2016-03-02.\n"}],"tag":"SearchResult"}]],["cardinality",[{"values":[{"sourceSpan":{"start":[114,3],"name":".spago/enums/v5.0.0/src/Data/Enum.purs","end":[114,31]},"score":2,"packageInfo":{"values":["enums"],"tag":"Package"},"name":"cardinality","moduleName":"Data.Enum","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Enum"],"BoundedEnum"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Enum"],"BoundedEnum"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Enum"],"Cardinality"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[164,1],"name":".spago/enums/v5.0.0/src/Data/Enum.purs","end":[164,40]},"score":2,"packageInfo":{"values":["enums"],"tag":"Package"},"name":"Cardinality","moduleName":"Data.Enum","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A type for the size of finite enumerations.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["enums"],"tag":"Package"},"name":"Cardinality","moduleName":"Data.Enum","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["caseinsensitivenonemptystring",[{"values":[{"sourceSpan":{"start":[9,1],"name":".spago/strings/v5.0.0/src/Data/String/NonEmpty/CaseInsensitive.purs","end":[9,85]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"CaseInsensitiveNonEmptyString","moduleName":"Data.String.NonEmpty.CaseInsensitive","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A newtype for case insensitive string comparisons and ordering.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"CaseInsensitiveNonEmptyString","moduleName":"Data.String.NonEmpty.CaseInsensitive","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["caseinsensitivestring",[{"values":[{"sourceSpan":{"start":[9,1],"name":".spago/strings/v5.0.0/src/Data/String/CaseInsensitive.purs","end":[9,61]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"CaseInsensitiveString","moduleName":"Data.String.CaseInsensitive","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A newtype for case insensitive string comparisons and ordering.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"CaseInsensitiveString","moduleName":"Data.String.CaseInsensitive","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["cat",[{"values":[{"sourceSpan":{"start":[65,1],"name":".spago/pipes/v7.0.1/src/Pipes.purs","end":[65,45]},"score":1,"packageInfo":{"values":["pipes"],"tag":"Package"},"name":"cat","moduleName":"Pipes","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["r",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pipes","Core"],"Pipe"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"r"}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["catcherror",[{"values":[{"sourceSpan":{"start":[41,3],"name":".spago/transformers/v5.1.0/src/Control/Monad/Error/Class.purs","end":[41,51]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"catchError","moduleName":"Control.Monad.Error.Class","info":{"values":[{"typeClassArguments":[["e",null],["m",null]],"typeClass":[["Control","Monad","Error","Class"],"MonadError"],"type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Error","Class"],"MonadError"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["catchexception",[{"values":[{"sourceSpan":{"start":[73,1],"name":".spago/exceptions/v5.0.0/src/Effect/Exception.purs","end":[77,14]},"score":4,"packageInfo":{"values":["exceptions"],"tag":"Package"},"name":"catchException","moduleName":"Effect.Exception","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Catch an exception by providing an exception handler.\n\nFor example:\n\n```purescript\nmain = catchException Console.logShow do\n  Console.log \"Exceptions thrown in this block will be logged to the console\"\n```\n"}],"tag":"SearchResult"}]],["catchjust",[{"values":[{"sourceSpan":{"start":[47,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Error/Class.purs","end":[53,9]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"catchJust","moduleName":"Control.Monad.Error.Class","info":{"values":[{"type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Error","Class"],"MonadError"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"This function allows you to provide a predicate for selecting the\nexceptions that you're interested in, and handle only those exceptons.\nIf the inner computation throws an exception, and the predicate returns\nNothing, then the whole computation will still fail with that exception.\n"}],"tag":"SearchResult"}]],["catcons",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"CatCons","moduleName":"Data.CatList","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CatQueue"],"CatQueue"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CatList"],"CatList"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["category",[{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/prelude/v5.0.1/src/Control/Category.purs","end":[18,30]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Category","moduleName":"Control.Category","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `identity <<< p = p <<< identity = p`\n"}],"tag":"SearchResult"}]],["catlist",[{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/catenable-lists/v6.0.1/src/Data/CatList.purs","end":[46,61]},"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"CatList","moduleName":"Data.CatList","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A strict catenable list.\n\n`CatList` may be empty, represented by `CatNil`.\n\n`CatList` may be non-empty, represented by `CatCons`. The `CatCons`\ndata constructor takes the first element of the list and a queue of\n`CatList`.\n"}],"tag":"SearchResult"}]],["catmaybes",[{"values":[{"sourceSpan":{"start":[250,1],"name":"src/Ch5.purs","end":[250,43]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"catMaybes","moduleName":"Ch5","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter a list of optional values, keeping only the elements which contain a value.\n\n```purescript\ncatMaybes (Just 1 : Nothing : Just 2 : Nothing : Nothing : Just 3 : Nil) = (1 : 2 : 3 : Nil)\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[188,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/List/Trans.purs","end":[188,69]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"catMaybes","moduleName":"Control.Monad.List.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","List","Trans"],"ListT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","List","Trans"],"ListT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Remove elements from a list which do not contain a value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[345,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty.purs","end":[345,58]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[728,1],"name":".spago/arrays/v6.0.1/src/Data/Array.purs","end":[728,50]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter an array of optional values, keeping only the elements which contain\na value, creating a new array.\n\n```purescript\ncatMaybes [Nothing, Just 2, Nothing, Just 4] = [2, 4]\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[454,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[454,48]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter a list of optional values, keeping only the elements which contain\na value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[225,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[225,58]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[429,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[429,48]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter a list of optional values, keeping only the elements which contain\na value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[709,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Map/Internal.purs","end":[709,61]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter a map of optional values, keeping only the key/value pairs which\ncontain a value, creating a new map.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[198,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set.purs","end":[198,55]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"catMaybes","moduleName":"Data.Set","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Filter a set of optional values, discarding values that contain `Nothing`\n"}],"tag":"SearchResult"}]],["catnil",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"CatNil","moduleName":"Data.CatList","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["catqueue",[{"values":[{"sourceSpan":{"start":[39,1],"name":".spago/catenable-lists/v6.0.1/src/Data/CatQueue.purs","end":[39,45]},"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"CatQueue","moduleName":"Data.CatQueue","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A strict double-ended queue (dequeue) representated using a pair of lists.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"CatQueue","moduleName":"Data.CatQueue","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["accum",[{"values":[{"sourceSpan":{"start":[5,1],"name":".spago/foldable-traversable/v5.0.1/src/Data/Traversable/Accum.purs","end":[5,44]},"score":15,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"Accum","moduleName":"Data.Traversable.Accum","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["accum",{"tag":"TypeVar","contents":"s"},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"a"},{"tag":"REmpty","contents":{}}]}]}]},"arguments":[["s",null],["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["acos",[{"values":[{"sourceSpan":{"start":[12,1],"name":".spago/math/v3.0.0/src/Math.purs","end":[12,41]},"score":6,"packageInfo":{"values":["math"],"tag":"Package"},"name":"acos","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the inverse cosine of the argument.\n"}],"tag":"SearchResult"}]],["actionwith",[{"values":[{"sourceSpan":{"start":[64,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Tree.purs","end":[64,34]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"ActionWith","moduleName":"Test.Spec.Tree","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},"arguments":[["m",null],["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["<$",[{"values":[{"sourceSpan":{"start":[71,1],"name":".spago/prelude/v5.0.1/src/Data/Functor.purs","end":[71,25]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<$)","moduleName":"Data.Functor","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<$>",[{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/prelude/v5.0.1/src/Data/Functor.purs","end":[28,20]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<$>)","moduleName":"Data.Functor","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]]]