// This file was generated by purescript-docs-search.
window.DocsSearchIndex["20"] = [["x",[{"values":[{"sourceSpan":{"start":[179,1],"name":".spago/pipes/v7.0.1/src/Pipes/Internal.purs","end":[179,16]},"score":1,"packageInfo":{"values":["pipes"],"tag":"Package"},"name":"X","moduleName":"Pipes.Internal","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["pipes"],"tag":"Package"},"name":"X","moduleName":"Pipes.Internal","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Pipes","Internal"],"X"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["wednesday",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Wednesday","moduleName":"Data.Date.Component","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["week",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Week","moduleName":"Data.Interval.Duration","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/datetime/v5.0.2/src/Data/Interval/Duration.purs","end":[48,27]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"week","moduleName":"Data.Interval.Duration","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Interval","Duration"],"Duration"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["weekday",[{"values":[{"sourceSpan":{"start":[144,1],"name":".spago/datetime/v5.0.2/src/Data/Date/Component.purs","end":[151,11]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Weekday","moduleName":"Data.Date.Component","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A type representing the days of the week in the Gregorian calendar.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/datetime/v5.0.2/src/Data/Date.purs","end":[87,27]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"weekday","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Weekday"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The weekday for a date value.\n"}],"tag":"SearchResult"}]],["that",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"That","moduleName":"Ch6","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["thaw",[{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST.purs","end":[87,65]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"thaw","moduleName":"Data.Array.ST","info":{"values":[{"type":{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST"],"STArray"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a mutable copy of an immutable array.\n"}],"tag":"SearchResult"}]],["theother",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"TheOther","moduleName":"Ch6","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["third",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Third","moduleName":"Ch6","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["this",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"This","moduleName":"Ch6","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["three",[{"values":[{"sourceSpan":null,"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Three","moduleName":"Ch9","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["throw",[{"values":[{"sourceSpan":{"start":[81,1],"name":".spago/exceptions/v5.0.0/src/Effect/Exception.purs","end":[81,38]},"score":4,"packageInfo":{"values":["exceptions"],"tag":"Package"},"name":"throw","moduleName":"Effect.Exception","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A shortcut allowing you to throw an error in one step. Defined as\n`throwException <<< error`.\n"}],"tag":"SearchResult"}]],["throwerror",[{"values":[{"sourceSpan":{"start":[24,3],"name":".spago/transformers/v5.1.0/src/Control/Monad/Error/Class.purs","end":[24,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"throwError","moduleName":"Control.Monad.Error.Class","info":{"values":[{"typeClassArguments":[["e",null],["m",null]],"typeClass":[["Control","Monad","Error","Class"],"MonadThrow"],"type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Error","Class"],"MonadThrow"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["throwexception",[{"values":[{"sourceSpan":{"start":[60,1],"name":".spago/exceptions/v5.0.0/src/Effect/Exception.purs","end":[63,14]},"score":4,"packageInfo":{"values":["exceptions"],"tag":"Package"},"name":"throwException","moduleName":"Effect.Exception","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Throw an exception\n\nFor example:\n\n```purescript\nmain = do\n  x <- readNumber\n  when (x < 0) $ throwException $\n    error \"Expected a non-negative number\"\n```\n"}],"tag":"SearchResult"}]],["thursday",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Thursday","moduleName":"Data.Date.Component","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["t6",[{"values":[{"sourceSpan":{"start":[39,1],"name":".spago/functors/v4.1.1/src/Data/Functor/Product/Nested.purs","end":[39,47]},"score":4,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T6","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product","Nested"],"T5"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/tuples/v6.0.1/src/Data/Tuple/Nested.purs","end":[89,45]},"score":19,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T6","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T5"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["signum",[{"values":[{"sourceSpan":{"start":[216,1],"name":".spago/prelude/v5.0.1/src/Data/Ord.purs","end":[216,46]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"signum","moduleName":"Data.Ord","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The sign function; always evaluates to either `one` or `negate one`. For\nany `x`, we should have `signum x * abs x == x`.\n"}],"tag":"SearchResult"}]],["sin",[{"values":[{"sourceSpan":{"start":[58,1],"name":".spago/math/v3.0.0/src/Math.purs","end":[58,40]},"score":6,"packageInfo":{"values":["math"],"tag":"Package"},"name":"sin","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the sine of the argument.\n"}],"tag":"SearchResult"}]],["singleton",[{"values":[{"sourceSpan":{"start":[63,1],"name":"src/Ch5.purs","end":[63,30]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"singleton","moduleName":"Ch5","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list with a single element.\n\n```purescript\nsingleton \"xyz\" = (\"xyz\" : Nil)\nsingleton 2 = (2 : Nil)\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[111,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/List/Trans.purs","end":[111,57]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"singleton","moduleName":"Control.Monad.List.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","List","Trans"],"ListT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list with one element.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[196,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty.purs","end":[196,44]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"singleton","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[182,1],"name":".spago/arrays/v6.0.1/src/Data/Array.purs","end":[182,36]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"singleton","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create an array of one element\n```purescript\nsingleton 2 = [2]\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[84,1],"name":".spago/catenable-lists/v6.0.1/src/Data/CatList.purs","end":[84,38]},"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.CatList","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CatList"],"CatList"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a catenable list with a single item.\n\nRunning time: `O(1)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[57,1],"name":".spago/catenable-lists/v6.0.1/src/Data/CatQueue.purs","end":[57,39]},"score":1,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.CatQueue","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CatQueue"],"CatQueue"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a queue containing a single element.\n\nRunning time: `O(1)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[48,43]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[141,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[141,35]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list with a single element.\n\nRunning time: `O(1)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[133,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[133,43]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[141,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[141,35]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"singleton","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list with a single element.\n\nRunning time: `O(1)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[190,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Map/Internal.purs","end":[190,43]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"singleton","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a map with one key/value pair\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[68,1],"name":".spago/nonempty/v6.0.0/src/Data/NonEmpty.purs","end":[68,53]},"score":5,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"singleton","moduleName":"Data.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a non-empty structure with a single value.\n\n```purescript\nimport Prelude\n\nsingleton 1 == 1 :| []\nsingleton 1 == 1 :| Nil\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set/NonEmpty.purs","end":[63,42]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"singleton","moduleName":"Data.Set.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a set with one element.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[102,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set.purs","end":[102,34]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"singleton","moduleName":"Data.Set","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a set with one element\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[88,1],"name":".spago/strings/v5.0.0/src/Data/String/CodePoints.purs","end":[88,33]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"singleton","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a string containing just the given code point. Operates in\nconstant space and time.\n\n```purescript\n>>> map singleton (toEnum 0x1D400)\nJust \"𝐀\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[83,1],"name":".spago/strings/v5.0.0/src/Data/String/CodeUnits.purs","end":[83,43]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"singleton","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns a string of length `1` containing the given character.\n\n```purescript\nsingleton 'l' == \"l\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[60,1],"name":".spago/strings/v5.0.0/src/Data/String/NonEmpty/CodePoints.purs","end":[60,41]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"singleton","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[70,1],"name":".spago/strings/v5.0.0/src/Data/String/NonEmpty/CodeUnits.purs","end":[70,36]},"score":3,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"singleton","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a `NonEmptyString` from a character.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[96,1],"name":".spago/unfoldable/v5.0.0/src/Data/Unfoldable1.purs","end":[96,51]},"score":9,"packageInfo":{"values":["unfoldable"],"tag":"Package"},"name":"singleton","moduleName":"Data.Unfoldable1","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable1"],"Unfoldable1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Contain a single value. For example:\n\n``` purescript\nsingleton \"foo\" == (NEL.singleton \"foo\" :: NEL.NonEmptyList String)\n```\n"}],"tag":"SearchResult"}]],["size",[{"values":[{"sourceSpan":{"start":[29,1],"name":".spago/gen/v3.0.0/src/Control/Monad/Gen/Class.purs","end":[29,16]},"score":4,"packageInfo":{"values":["gen"],"tag":"Package"},"name":"Size","moduleName":"Control.Monad.Gen.Class","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[676,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Map/Internal.purs","end":[676,35]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"size","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Calculate the number of key/value pairs in a map\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[121,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set/NonEmpty.purs","end":[121,39]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"size","moduleName":"Data.Set.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Find the size of a set.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[132,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set.purs","end":[132,31]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"size","moduleName":"Data.Set","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Find the size of a set\n"}],"tag":"SearchResult"}]],["sized",[{"values":[{"sourceSpan":{"start":[27,3],"name":".spago/gen/v3.0.0/src/Control/Monad/Gen/Class.purs","end":[27,42]},"score":4,"packageInfo":{"values":["gen"],"tag":"Package"},"name":"sized","moduleName":"Control.Monad.Gen.Class","info":{"values":[{"typeClassArguments":[["m",null]],"typeClass":[["Control","Monad","Gen","Class"],"MonadGen"],"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Gen","Class"],"Size"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":"Runs a generator, passing in the current size state.\n"}],"tag":"SearchResult"}]],["place",[{"values":[{"sourceSpan":{"start":[150,1],"name":"src/Ch6.purs","end":[153,10]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Place","moduleName":"Ch6","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["plus",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/control/v5.0.0/src/Control/Plus.purs","end":[24,25]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Plus","moduleName":"Control.Plus","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Plus` type class extends the `Alt` type class with a value that\nshould be the left and right identity for `(<|>)`.\n\nIt is similar to `Monoid`, except that it applies to types of\nkind `* -> *`, like `Array` or `List`, rather than concrete types like\n`String` or `Number`.\n\n`Plus` instances should satisfy the following laws:\n\n- Left identity: `empty <|> x == x`\n- Right identity: `x <|> empty == x`\n- Annihilation: `f <$> empty == empty`\n"}],"tag":"SearchResult"}]],["mod",[{"values":[{"sourceSpan":{"start":[66,3],"name":".spago/prelude/v5.0.1/src/Data/EuclideanRing.purs","end":[66,21]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"mod","moduleName":"Data.EuclideanRing","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","EuclideanRing"],"EuclideanRing"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["mod4",[{"values":[{"sourceSpan":{"start":[178,1],"name":"src/Ch9.purs","end":[182,10]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Mod4","moduleName":"Ch9","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["modify",[{"values":[{"sourceSpan":{"start":[125,1],"name":".spago/st/v5.0.1/src/Control/Monad/ST/Internal.purs","end":[125,54]},"score":2,"packageInfo":{"values":["st"],"tag":"Package"},"name":"modify","moduleName":"Control.Monad.ST.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"STRef"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Modify the value of a mutable reference by applying a function to the\ncurrent value. The modified value is returned.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State/Class.purs","end":[41,56]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"modify","moduleName":"Control.Monad.State.Class","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","State","Class"],"MonadState"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"s"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Modify the state by applying a function to the current state. The returned\nvalue is the new state value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[195,1],"name":".spago/arrays/v6.0.1/src/Data/Array/ST.purs","end":[195,69]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"modify","moduleName":"Data.Array.ST","info":{"values":[{"type":{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST"],"STArray"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Mutate the element at the specified index using the supplied function.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[62,1],"name":".spago/refs/v5.0.0/src/Effect/Ref.purs","end":[62,50]},"score":3,"packageInfo":{"values":["refs"],"tag":"Package"},"name":"modify","moduleName":"Effect.Ref","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"s"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update the value of a mutable reference by applying a function\nto the current value. The updated value is returned.\n"}],"tag":"SearchResult"}]],["modify'",[{"values":[{"sourceSpan":{"start":[118,1],"name":".spago/st/v5.0.1/src/Control/Monad/ST/Internal.purs","end":[118,82]},"score":2,"packageInfo":{"values":["st"],"tag":"Package"},"name":"modify'","moduleName":"Control.Monad.ST.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["state",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty","contents":{}}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"STRef"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update the value of a mutable reference by applying a function\nto the current value, computing a new state value for the reference and\na return value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[55,1],"name":".spago/refs/v5.0.0/src/Effect/Ref.purs","end":[55,78]},"score":3,"packageInfo":{"values":["refs"],"tag":"Package"},"name":"modify'","moduleName":"Effect.Ref","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["state",{"tag":"TypeVar","contents":"s"},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty","contents":{}}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update the value of a mutable reference by applying a function\nto the current value.\n"}],"tag":"SearchResult"}]],["modify_",[{"values":[{"sourceSpan":{"start":[44,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State/Class.purs","end":[44,60]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"modify_","moduleName":"Control.Monad.State.Class","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","State","Class"],"MonadState"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/refs/v5.0.0/src/Effect/Ref.purs","end":[66,54]},"score":3,"packageInfo":{"values":["refs"],"tag":"Package"},"name":"modify_","moduleName":"Effect.Ref","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A version of `modify` which does not return the updated value.\n"}],"tag":"SearchResult"}]],["modifyaroundaction",[{"values":[{"sourceSpan":{"start":[113,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Tree.purs","end":[113,95]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"modifyAroundAction","moduleName":"Test.Spec.Tree","info":{"values":[{"type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"ActionWith"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"ActionWith"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"Item"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"Item"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Modify around action of an Item\n"}],"tag":"SearchResult"}]],["modifyat",[{"values":[{"sourceSpan":{"start":[300,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty.purs","end":[300,84]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"modifyAt","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[569,1],"name":".spago/arrays/v6.0.1/src/Data/Array.purs","end":[569,68]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"modifyAt","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Apply a function to the element at the specified index, creating a new\narray, or returning `Nothing` if the index is out of bounds.\n\n```purescript\nmodifyAt 1 toUpper [\"Hello\", \"World\"] = Just [\"Hello\", \"WORLD\"]\nmodifyAt 10 toUpper [\"Hello\", \"World\"] = Nothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[370,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[370,58]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"modifyAt","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update the element at the specified index by applying a function to\nthe current value, returning a new list, or return the original list unchanged\nif the index is out-of-bounds.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[208,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[208,82]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"modifyAt","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[346,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[346,66]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"modifyAt","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update the element at the specified index by applying a function to\nthe current value, returning a new list or `Nothing` if the index is\nout-of-bounds.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"}]],["modifyatindices",[{"values":[{"sourceSpan":{"start":[303,1],"name":".spago/arrays/v6.0.1/src/Data/Array/NonEmpty.purs","end":[303,101]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"modifyAtIndices","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[767,1],"name":".spago/arrays/v6.0.1/src/Data/Array.purs","end":[767,85]},"score":5,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"modifyAtIndices","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Apply a function to the element at the specified indices,\ncreating a new array. Out-of-bounds indices will have no effect.\n\n```purescript\nindices = [1, 3]\nmodifyAtIndices indices toUpper [\"Hello\", \"World\", \"and\", \"others\"]\n   = [\"Hello\", \"WORLD\", \"and\", \"OTHERS\"]\n```\n\n"}],"tag":"SearchResult"}]],["modifydate",[{"values":[{"sourceSpan":{"start":[40,1],"name":".spago/datetime/v5.0.2/src/Data/DateTime.purs","end":[40,53]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"modifyDate","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["modifydatef",[{"values":[{"sourceSpan":{"start":[43,1],"name":".spago/datetime/v5.0.2/src/Data/DateTime.purs","end":[43,81]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"modifyDateF","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["modifytime",[{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/datetime/v5.0.2/src/Data/DateTime.purs","end":[49,53]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"modifyTime","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["modifytimef",[{"values":[{"sourceSpan":{"start":[52,1],"name":".spago/datetime/v5.0.2/src/Data/DateTime.purs","end":[52,81]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"modifyTimeF","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["monad",[{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/prelude/v5.0.1/src/Control/Monad.purs","end":[31,41]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Monad","moduleName":"Control.Monad","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n"}],"tag":"SearchResult"}]],["monadaff",[{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/aff/v6.0.0/src/Effect/Aff/Class.purs","end":[17,21]},"score":4,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"MonadAff","moduleName":"Effect.Aff.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["monadask",[{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Reader/Class.purs","end":[17,13]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadAsk","moduleName":"Control.Monad.Reader.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["r"]]],"arguments":[["r",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadAsk` type class represents those monads which support a global\ncontext that can be provided via the `ask` function.\n\nAn implementation is provided for `ReaderT`, and for other monad\ntransformers defined in this library.\n\nLaw:\n\n- `do { ask ; ask } = ask`\n"}],"tag":"SearchResult"}]],["monadbracket",[{"values":[{"sourceSpan":{"start":[83,1],"name":".spago/fork/v5.0.0/src/Control/Monad/Fork/Class.purs","end":[86,19]},"score":1,"packageInfo":{"values":["fork"],"tag":"Package"},"name":"MonadBracket","moduleName":"Control.Monad.Fork.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad","Fork","Class"],"MonadKill"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","Monad","Error","Class"],"MonadError"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["e","f"]]],"arguments":[["e",null],["f",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Represents Monads which support cleanup in the presence of async\nexceptions.\n\nLaws:\n```purescript\nbracket a k \\_ -> pure r\n  = uninterruptible (a >>= k (Completed r))\n\n-- Release failed\nbracket a k \\_ -> throwError e\n  = uninterruptible (a >>= k (Failed e) *> throwError e)\n\n-- Release killed\nfork (bracket a k \\_ -> never) >>= \\f -> kill e f *> void (try (join f))\n  = uninterruptible (a >>= k (Killed e))\n```\n"}],"tag":"SearchResult"}]],["monadcont",[{"values":[{"sourceSpan":{"start":[26,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Cont/Class.purs","end":[27,59]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadCont","moduleName":"Control.Monad.Cont.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadCont` type class represents those monads which support the\n`callCC`, or _call-with-current-continuation_ operation.\n\nThis action makes the current continuation available to the caller.\n\nFor example:\n\n```purescript\n-- setTimeout :: Number -> Effect Unit -> Effect Unit\n\ndelay :: Number -> ContT Unit Effect Unit\ndelay n = callCC \\cont ->\n  lift $ setTimeout n (runContT (cont unit) (\\_ -> pure unit))\n```\nAn implementation is provided for `ContT`, and for other monad transformers\ndefined in this library.\n"}],"tag":"SearchResult"}]],["monadeffect",[{"values":[{"sourceSpan":{"start":[15,1],"name":".spago/effect/v3.0.0/src/Effect/Class.purs","end":[16,42]},"score":13,"packageInfo":{"values":["effect"],"tag":"Package"},"name":"MonadEffect","moduleName":"Effect.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadEffect` class captures those monads which support native effects.\n\nInstances are provided for `Effect` itself, and the standard monad\ntransformers.\n\n`liftEffect` can be used in any appropriate monad transformer stack to lift an\naction of type `Effect a` into the monad.\n\n"}],"tag":"SearchResult"}]],["monaderror",[{"values":[{"sourceSpan":{"start":[40,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Error/Class.purs","end":[41,51]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadError","moduleName":"Control.Monad.Error.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad","Error","Class"],"MonadThrow"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["e"]]],"arguments":[["e",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadError` type class represents those monads which support catching\nerrors.\n\n- `catchError x f` calls the error handler `f` if an error is thrown during the\n  evaluation of `x`.\n\nAn implementation is provided for `ExceptT`, and for other monad transformers\ndefined in this library.\n\nLaws:\n\n- Catch: `catchError (throwError e) f = f e`\n- Pure: `catchError (pure a) f = pure a`\n\n"}],"tag":"SearchResult"}]],["monadfork",[{"values":[{"sourceSpan":{"start":[27,1],"name":".spago/fork/v5.0.0/src/Control/Monad/Fork/Class.purs","end":[30,24]},"score":1,"packageInfo":{"values":["fork"],"tag":"Package"},"name":"MonadFork","moduleName":"Control.Monad.Fork.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[[["m"],["f"]]],"arguments":[["f",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Represents Monads which can be forked asynchronously.\n\nLaws:\n\n```purescript\n-- Unjoined suspension is a no-op\nsuspend a1 *> suspend a2 = suspend a2\n\n-- Suspend/join is identity\nsuspend >=> join = id\n\n-- Fork/join is identity\nfork >=> join = id\n\n-- Join is idempotent\njoin t *> join t = join t\n```\n"}],"tag":"SearchResult"}]],["monadfree",[{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/free/v6.0.1/src/Control/Monad/Free/Class.purs","end":[17,39]},"score":2,"packageInfo":{"values":["free"],"tag":"Package"},"name":"MonadFree","moduleName":"Control.Monad.Free.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["f"]]],"arguments":[["f",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Based on <http://hackage.haskell.org/package/free/docs/Control-Monad-Free-Class.html>\n"}],"tag":"SearchResult"}]],["monadgen",[{"values":[{"sourceSpan":{"start":[12,1],"name":".spago/gen/v3.0.0/src/Control/Monad/Gen/Class.purs","end":[27,42]},"score":4,"packageInfo":{"values":["gen"],"tag":"Package"},"name":"MonadGen","moduleName":"Control.Monad.Gen.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for random generator implementations.\n\nInstances should provide implementations for the generation functions\nthat return choices with uniform probability.\n\nSee also `Gen` in `purescript-quickcheck`, which implements this\ntype class.\n"}],"tag":"SearchResult"}]],["monadkill",[{"values":[{"sourceSpan":{"start":[53,1],"name":".spago/fork/v5.0.0/src/Control/Monad/Fork/Class.purs","end":[54,31]},"score":1,"packageInfo":{"values":["fork"],"tag":"Package"},"name":"MonadKill","moduleName":"Control.Monad.Fork.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad","Fork","Class"],"MonadFork"],"constraintArgs":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","Monad","Error","Class"],"MonadThrow"],"constraintArgs":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["e","f"]]],"arguments":[["e",null],["f",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Represents Monads which can be killed after being forked.\n\nLaws:\n\n```purescript\n-- Killed suspension is an exception\nsuspend a >>= \\f -> kill e f *> join f = throwError e\n\n-- Suspend/kill is unit\nsuspend a >>= kill e = pure unit\n```\n"}],"tag":"SearchResult"}]],["monadplus",[{"values":[{"sourceSpan":{"start":[32,1],"name":".spago/control/v5.0.0/src/Control/MonadPlus.purs","end":[32,46]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"MonadPlus","moduleName":"Control.MonadPlus","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadPlus` type class has no members of its own; it just specifies\nthat the type has both `Monad` and `Alternative` instances.\n\nTypes which have `MonadPlus` instances should also satisfy the following\nlaw:\n\n- Distributivity: `(x <|> y) >>= f == (x >>= f) <|> (y >>= f)`\n"}],"tag":"SearchResult"}]],["monadreader",[{"values":[{"sourceSpan":{"start":[38,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Reader/Class.purs","end":[39,44]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadReader","moduleName":"Control.Monad.Reader.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad","Reader","Class"],"MonadAsk"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["r"]]],"arguments":[["r",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"An extension of the `MonadAsk` class that introduces a function `local f x`\nthat allows the value of the local context to be modified for the duration\nof the execution of action `x`.\n\nAn implementation is provided for `ReaderT`, and for other monad\ntransformers defined in this library.\n\nLaws in addition to the `MonadAsk` law:\n\n- `local f ask = f <$> ask`\n- `local _ (pure a) = pure a`\n- `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`\n"}],"tag":"SearchResult"}]],["monadrec",[{"values":[{"sourceSpan":{"start":[54,1],"name":".spago/tailrec/v5.0.1/src/Control/Monad/Rec/Class.purs","end":[55,58]},"score":9,"packageInfo":{"values":["tailrec"],"tag":"Package"},"name":"MonadRec","moduleName":"Control.Monad.Rec.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"This type class captures those monads which support tail recursion in\nconstant stack space.\n\nThe `tailRecM` function takes a step function, and applies that step\nfunction recursively until a pure value of type `b` is found.\n\nInstances are provided for standard monad transformers.\n\nFor example:\n\n```purescript\nloopWriter :: Int -> WriterT (Additive Int) Effect Unit\nloopWriter n = tailRecM go n\n  where\n  go 0 = do\n    traceM \"Done!\"\n    pure (Done unit)\n  go i = do\n    tell $ Additive i\n    pure (Loop (i - 1))\n```\n"}],"tag":"SearchResult"}]],["monadst",[{"values":[{"sourceSpan":{"start":[10,1],"name":".spago/st/v5.0.1/src/Control/Monad/ST/Class.purs","end":[11,22]},"score":2,"packageInfo":{"values":["st"],"tag":"Package"},"name":"MonadST","moduleName":"Control.Monad.ST.Class","info":{"values":[{"superclasses":[],"fundeps":[[["m"],["s"]]],"arguments":[["s",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["monadstate",[{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/State/Class.purs","end":[25,47]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadState","moduleName":"Control.Monad.State.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["s"]]],"arguments":[["s",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadState s` type class represents those monads which support a single piece of mutable\nstate of type `s`.\n\n- `state f` updates the state using the function `f`.\n\nAn implementation is provided for `StateT`, and for other monad transformers\ndefined in this library.\n\nLaws:\n\n- `do { get ; get } = get`\n- `do { put x ; put y } = put y`\n- `do { put x ; get } = put x $> x`\n- `do { s <- get ; put s } = pure unit`\n\n"}],"tag":"SearchResult"}]],["monadtell",[{"values":[{"sourceSpan":{"start":[19,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Writer/Class.purs","end":[20,22]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadTell","moduleName":"Control.Monad.Writer.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["w"]]],"arguments":[["w",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadTell w` type class represents those monads which support a\nmonoidal accumulator of type `w`, where `tell` appends a value to the\naccumulator.\n\nAn implementation is provided for `WriterT`, and for other monad\ntransformers defined in this library.\n\nLaw:\n\n- `do { tell x ; tell y } = tell (x <> y)`\n"}],"tag":"SearchResult"}]],["monadthrow",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Error/Class.purs","end":[24,35]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadThrow","moduleName":"Control.Monad.Error.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["e"]]],"arguments":[["e",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadThrow` type class represents those monads which support errors via\n`throwError`, where `throwError e` halts, yielding the error `e`.\n\nAn implementation is provided for `ExceptT`, and for other monad transformers\ndefined in this library.\n\nLaws:\n\n- Left zero: `throwError e >>= f = throwError e`\n\n"}],"tag":"SearchResult"}]],["monadtrans",[{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Trans/Class.purs","end":[23,46]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadTrans","moduleName":"Control.Monad.Trans.Class","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["t",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadTrans` type class represents _monad transformers_.\n\nA monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which\ntakes a `Monad` as its first argument, and returns another `Monad`.\n\nThis allows us to add additional effects to an existing monad. By iterating this\nprocess, we create monad transformer _stacks_, which contain all of the effects\nrequired for a particular computation.\n\nThe laws state that `lift` is a `Monad` morphism.\n\nLaws:\n\n- `lift (pure a) = pure a`\n- `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`\n"}],"tag":"SearchResult"}]],["monadwriter",[{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/transformers/v5.1.0/src/Control/Monad/Writer/Class.purs","end":[38,48]},"score":8,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"MonadWriter","moduleName":"Control.Monad.Writer.Class","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"constraintClass":[["Control","Monad","Writer","Class"],"MonadTell"],"constraintArgs":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"m"}]}],"fundeps":[[["m"],["w"]]],"arguments":[["w",null],["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"An extension of the `MonadTell` class that introduces some operations on\nthe accumulator:\n\n- `listen` modifies the result to include the changes to the accumulator.\n- `pass` applies the returned function to the accumulator.\n\nAn implementation is provided for `WriterT`, and for other monad\ntransformers defined in this library.\n\nLaws in addition to the `MonadTell` law:\n\n- `do { tell x ; tell y } = tell (x <> y)`\n- `listen (pure a) = pure (Tuple a mempty)`\n- `listen (writer a x) = tell x $> Tuple a x`\n"}],"tag":"SearchResult"}]],["monadzero",[{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/control/v5.0.0/src/Control/MonadZero.purs","end":[46,69]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"MonadZero","moduleName":"Control.MonadZero","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"constraintClass":[["Control","MonadZero"],"MonadZeroIsDeprecated"],"constraintArgs":[]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `MonadZero` type class has no members of its own; it just specifies\nthat the type has both `Monad` and `Alternative` instances.\n\nTypes which have `MonadZero` instances should also satisfy the following\nlaws:\n\n- Annihilation: `empty >>= f = empty`\n"}],"tag":"SearchResult"}]],["monadzeroisdeprecated",[{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/control/v5.0.0/src/Control/MonadZero.purs","end":[36,28]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"MonadZeroIsDeprecated","moduleName":"Control.MonadZero","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["monday",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Monday","moduleName":"Data.Date.Component","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["monoid",[{"values":[{"sourceSpan":{"start":[102,1],"name":"src/Ch9.purs","end":[104,13]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"Monoid","moduleName":"Ch9","info":{"values":[{"superclasses":[{"constraintClass":[["Ch9"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"#### MONOID\n\nA Monoid is a Semigroup where the Set has a Neutral Element, e.\n\nA formal definition of a Monoid\n`e ∈ M, ∀ a ∈ M ⇒ a • e = e • a = a` \n\n Where M is the Monoid Set\n  ```\n  e ∈ M                (e is an Element of M)\n  ∀ a ∈ M              (and for all a that is an Element of M)\n  ⇒                    (it follows that)\n  a • e = e • a = a    (applying a to e is equal to\n                        applying e to a which is equal to ai)\n  ```\n\nThe Neutral Elemnet (Identity) can be applied to any Element of the Set\nIncluding itself, and have no impact on that Element.\n\nE.g:\n ```\n M = { 0, 1, 2, 3, ...} and • = +, e = 0 \n ```\n - M is first a Magma: `1 + 3 = 4 --> (Closed)`\n - And then a Semigroup: `1 + (2 + 3) = (1 + 2) + 3 --> (Associative)`\n - And then a Monoid: `0 + 1 = 1 + 0 = 0 --> (Identity)`\n\nE.g2:\n ```\n M = { true, false } and • = ||, e = false\n ```\n M is first a Magma then a Semigroup and then a Monoit.\n ```\n true || false = true                                 (Closed)\n true || (true || false) = (true || true) || false    (Associative)\n false || true = true || false = false                (Identity)\n ```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[44,1],"name":".spago/prelude/v5.0.1/src/Data/Monoid.purs","end":[45,14]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Monoid","moduleName":"Data.Monoid","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]}],"fundeps":[],"arguments":[["m",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A `Monoid` is a `Semigroup` with a value `mempty`, which is both a\nleft and right unit for the associative operation `<>`:\n\n- Left unit: `(mempty <> x) = x`\n- Right unit: `(x <> mempty) = x`\n\n`Monoid`s are commonly used as the result of fold operations, where\n`<>` is used to combine individual results, and `mempty` gives the result\nof folding an empty collection of elements.\n\n### Newtypes for Monoid\n\nSome types (e.g. `Int`, `Boolean`) can implement multiple law-abiding\ninstances for `Monoid`. Let's use `Int` as an example\n1. `<>` could be `+` and `mempty` could be `0`\n2. `<>` could be `*` and `mempty` could be `1`.\n\nTo clarify these ambiguous situations, one should use the newtypes\ndefined in `Data.Monoid.<NewtypeName>` modules.\n\nIn the above ambiguous situation, we could use `Additive`\nfor the first situation or `Multiplicative` for the second one.\n"}],"tag":"SearchResult"}]],["monoidrecord",[{"values":[{"sourceSpan":{"start":[101,1],"name":".spago/prelude/v5.0.1/src/Data/Monoid.purs","end":[102,67]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"MonoidRecord","moduleName":"Data.Monoid","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Semigroup"],"SemigroupRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]}],"fundeps":[[["rowlist"],["row","subrow"]]],"arguments":[["rowlist",null],["row",null],["subrow",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for records where all fields have `Monoid` instances, used to\nimplement the `Monoid` instance for records.\n"}],"tag":"SearchResult"}]],["month",[{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/datetime/v5.0.2/src/Data/Date/Component.purs","end":[58,13]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Month","moduleName":"Data.Date.Component","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A month component for a date in the Gregorian calendar.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[79,1],"name":".spago/datetime/v5.0.2/src/Data/Date.purs","end":[79,23]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"month","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Month"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The month component of a date value.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"Month","moduleName":"Data.Interval.Duration","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[54,1],"name":".spago/datetime/v5.0.2/src/Data/Interval/Duration.purs","end":[54,28]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"month","moduleName":"Data.Interval.Duration","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Interval","Duration"],"Duration"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["isallparallelizable",[{"values":[{"sourceSpan":{"start":[91,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Tree.purs","end":[91,66]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"isAllParallelizable","moduleName":"Test.Spec.Tree","info":{"values":[{"type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"Tree"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","Spec","Tree"],"Item"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return true if all items in the tree are parallelizable\n"}],"tag":"SearchResult"}]],["isempty",[{"values":[{"sourceSpan":null,"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"IsEmpty","moduleName":"Data.Interval.Duration.Iso","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[185,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Map/Internal.purs","end":[185,42]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"isEmpty","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test if a map is empty\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[98,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Set.purs","end":[98,38]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"isEmpty","moduleName":"Data.Set","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test if a set is empty\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/avar/v4.0.0/src/Effect/AVar.purs","end":[89,38]},"score":1,"packageInfo":{"values":["avar"],"tag":"Package"},"name":"isEmpty","moduleName":"Effect.AVar","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","AVar"],"AVarStatus"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["isfilled",[{"values":[{"sourceSpan":{"start":[94,1],"name":".spago/avar/v4.0.0/src/Effect/AVar.purs","end":[94,39]},"score":1,"packageInfo":{"values":["avar"],"tag":"Package"},"name":"isFilled","moduleName":"Effect.AVar","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","AVar"],"AVarStatus"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["isfinite",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/numbers/v8.0.0/src/Data/Number.purs","end":[23,45]},"score":1,"packageInfo":{"values":["numbers"],"tag":"Package"},"name":"isFinite","moduleName":"Data.Number","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether a number is finite\n"}],"tag":"SearchResult"}]],["isjust",[{"values":[{"sourceSpan":{"start":[271,1],"name":".spago/maybe/v5.0.0/src/Data/Maybe.purs","end":[271,39]},"score":21,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"isJust","moduleName":"Data.Maybe","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `true` when the `Maybe` value was constructed with `Just`.\n"}],"tag":"SearchResult"}]],["iskilled",[{"values":[{"sourceSpan":{"start":[99,1],"name":".spago/avar/v4.0.0/src/Effect/AVar.purs","end":[99,39]},"score":1,"packageInfo":{"values":["avar"],"tag":"Package"},"name":"isKilled","moduleName":"Effect.AVar","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","AVar"],"AVarStatus"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["isleapyear",[{"values":[{"sourceSpan":{"start":[120,1],"name":".spago/datetime/v5.0.2/src/Data/Date.purs","end":[120,30]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"isLeapYear","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Year"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Checks whether a year is a leap year according to the proleptic Gregorian\ncalendar.\n"}],"tag":"SearchResult"}]],["isleft",[{"values":[{"sourceSpan":{"start":[217,1],"name":".spago/either/v5.0.0/src/Data/Either.purs","end":[217,44]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"isLeft","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `true` when the `Either` value was constructed with `Left`.\n"}],"tag":"SearchResult"}]],["isnan",[{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/numbers/v8.0.0/src/Data/Number.purs","end":[17,42]},"score":1,"packageInfo":{"values":["numbers"],"tag":"Package"},"name":"isNaN","moduleName":"Data.Number","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether a number is NaN\n"}],"tag":"SearchResult"}]],["isnothing",[{"values":[{"sourceSpan":{"start":[275,1],"name":".spago/maybe/v5.0.0/src/Data/Maybe.purs","end":[275,42]},"score":21,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"isNothing","moduleName":"Data.Maybe","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `true` when the `Maybe` value is `Nothing`.\n"}],"tag":"SearchResult"}]],["isoduration",[{"values":[{"sourceSpan":{"start":[26,1],"name":".spago/datetime/v5.0.2/src/Data/Interval/Duration/Iso.purs","end":[26,43]},"score":2,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"IsoDuration","moduleName":"Data.Interval.Duration.Iso","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["isrecord",[{"values":[{"sourceSpan":{"start":[273,1],"name":"src/Ch6.purs","end":[274,27]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"IsRecord","moduleName":"Ch6","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[274,3],"name":"src/Ch6.purs","end":[274,27]},"score":200000,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"isRecord","moduleName":"Ch6","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Ch6"],"IsRecord"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Ch6"],"IsRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["isright",[{"values":[{"sourceSpan":{"start":[221,1],"name":".spago/either/v5.0.0/src/Data/Either.purs","end":[221,45]},"score":15,"packageInfo":{"values":["either"],"tag":"Package"},"name":"isRight","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `true` when the `Either` value was constructed with `Right`.\n"}],"tag":"SearchResult"}]],["issubmap",[{"values":[{"sourceSpan":{"start":[671,1],"name":".spago/ordered-collections/v2.0.1/src/Data/Map/Internal.purs","end":[671,71]},"score":1,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"isSubmap","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"k"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether one map contains all of the keys and values contained in another map\n"}],"tag":"SearchResult"}]],["issymbol",[{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/prelude/v5.0.1/src/Data/Symbol.purs","end":[24,53]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"IsSymbol","moduleName":"Data.Symbol","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["sym",{"tag":"TypeConstructor","contents":[["Prim"],"Symbol"]}]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for known symbols\n"}],"tag":"SearchResult"}]],["guard",[{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/control/v5.0.0/src/Control/Alternative.purs","end":[48,54]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"guard","moduleName":"Control.Alternative","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Fail using `Plus` if a condition does not hold, or\nsucceed using `Applicative` if it does.\n\nFor example:\n\n```purescript\nimport Prelude\nimport Control.Alternative (guard)\nimport Data.Array ((..))\n\nfactors :: Int -> Array Int\nfactors n = do\n  a <- 1..n\n  b <- 1..n\n  guard $ a * b == n\n  pure a\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[94,1],"name":".spago/prelude/v5.0.1/src/Data/Monoid.purs","end":[94,49]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"guard","moduleName":"Data.Monoid","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Allow or \"truncate\" a Monoid to its `mempty` value based on a condition.\n"}],"tag":"SearchResult"}]],["cyan",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["ansi"],"tag":"Package"},"name":"Cyan","moduleName":"Ansi.Codes","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[33,1],"name":".spago/spec/v5.0.1/src/Test/Spec/Style.purs","end":[33,14]},"score":0,"packageInfo":{"values":["spec"],"tag":"Package"},"name":"cyan","moduleName":"Test.Spec.Style","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["Test","Spec","Style"],"Style"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["cycle",[{"values":[{"sourceSpan":{"start":[196,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[196,36]},"score":5,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"cycle","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a list by repeating another list\n"}],"tag":"SearchResult"}]],["<<$>>",[{"values":[{"sourceSpan":{"start":[14,1],"name":".spago/bifunctors/v5.0.0/src/Control/Biapply.purs","end":[14,27]},"score":6,"packageInfo":{"values":["bifunctors"],"tag":"Package"},"name":"(<<$>>)","moduleName":"Control.Biapply","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":"A convenience operator which can be used to apply the result of `bipure` in\nthe style of `Applicative`:\n\n```purescript\nbipure f g <<$>> x <<*>> y\n```\n"}],"tag":"SearchResult"}]],["<<*",[{"values":[{"sourceSpan":{"start":[33,1],"name":".spago/bifunctors/v5.0.0/src/Control/Biapply.purs","end":[33,30]},"score":6,"packageInfo":{"values":["bifunctors"],"tag":"Package"},"name":"(<<*)","moduleName":"Control.Biapply","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<<*>>",[{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/bifunctors/v5.0.0/src/Control/Biapply.purs","end":[21,26]},"score":6,"packageInfo":{"values":["bifunctors"],"tag":"Package"},"name":"(<<*>>)","moduleName":"Control.Biapply","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<<+",[{"values":[{"sourceSpan":{"start":[127,1],"name":".spago/pipes/v7.0.1/src/Pipes/Core.purs","end":[127,40]},"score":1,"packageInfo":{"values":["pipes"],"tag":"Package"},"name":"(<<+)","moduleName":"Pipes.Core","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<<<",[{"values":[{"sourceSpan":{"start":[19,1],"name":".spago/prelude/v5.0.1/src/Control/Semigroupoid.purs","end":[19,24]},"score":40,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<<<)","moduleName":"Control.Semigroupoid","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<<=",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/control/v5.0.0/src/Control/Extend.purs","end":[35,23]},"score":19,"packageInfo":{"values":["control"],"tag":"Package"},"name":"(<<=)","moduleName":"Control.Extend","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],[".|.",[{"values":[{"sourceSpan":{"start":[20,1],"name":".spago/integers/v5.0.0/src/Data/Int/Bits.purs","end":[20,20]},"score":3,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"(.|.)","moduleName":"Data.Int.Bits","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]]]